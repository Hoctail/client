import resolve from '@rollup/plugin-node-resolve'
import commonjs from '@rollup/plugin-commonjs'
import json from '@rollup/plugin-json'

const externals = [
  'mobx',
  'mobx-state-tree',
  '@hoc/plugins-core',
  '@hoc/components',
]

const banner = `// Autogenerated. Do not edit.
import * as mobx from './mobx.mjs'
import * as mst from './mobx-state-tree.mjs'
import * as pluginsCore from './@hoc/plugins-core.mjs'
import { hocComponents } from './@hoc/components.mjs'
import * as hocModels from './@hoc/models.mjs'
`
const footer = `
if (miniApp) {
  const { registerPlugin, extendPlugin } = pluginsCore
  if (typeof miniApp === 'object' && Array.isArray(miniApp)) {
    for (let idx = 0; idx < miniApp.length; idx++ ) {
      miniApp[idx] = miniApp[idx].isBase ? extendPlugin(miniApp[idx]) : miniApp[idx]
      registerPlugin(miniApp[idx])
    }
  } else {
    miniApp = miniApp.isBase ? extendPlugin(miniApp) : miniApp
    registerPlugin(miniApp)
  }
  window.miniApp = miniApp
}
`

export default {
  input: 'index.js',
  output: {
    file: './.bundle.mini.js',
    format: 'iife',
    name: 'miniApp',
    banner: banner,
    footer: footer,
    exports: 'default',
    globals: {
      'mobx': 'mobx',
      'mobx-state-tree': 'mst',
      '@hoc/plugins-core': 'pluginsCore',
      '@hoc/components': 'hocComponents',
      '@hoc/models': 'hocModels',
    },
  },
  external: externals,
  plugins: [
    resolve({
      mainFields: ['module', 'jsnext', 'main'],
    }), 
    json(),
    commonjs(),
  ],
}
